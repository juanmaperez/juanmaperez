{"componentChunkName":"component---src-templates-post-template-js","path":"/blog/high-order-functions-callbacks-inversion-control","result":{"data":{"markdownRemark":{"html":"<p>Functions are one of the most important tools we have to make a task in Javascript. We can declare them and use them in different places of our application.</p>\n<p>We can use them to make operations such as calculate ten squared which is gonna return 100 every single time that we invoke that function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">tenSqured</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">tenSquared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 100</span></code></pre></div>\n<p>And we could do this for every single calculation that we want, nine squared, eight squared, but creating functions in this way it would be hard to track and maintain, and we would be breaking the DRY rule (Don't repeat yourself).</p>\n<p>For that reason, we should create functions based on functionalities, not in data. In that way, we can declare a function that receives a number of parameters, and we must implement our code to handle that data in the way that our functionality requires.</p>\n<p>Let's say we create the function multiplyBy2, which receives a parameter called num, which is the number we will be multiplying by 2, and the result of invoking that function is going to be the same when the argument passed is the same value.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 10</span>\n  <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 20</span></code></pre></div>\n<h2>High order functions</h2>\n<p>High order functions are those functions that makes one of this two things </p>\n<ul>\n<li>returns a function</li>\n<li>receives a function as an argument.</li>\n</ul>\n<p>These functions are based on the same principle of functionality that is based on our multiplyByTwo function but it goes a bit further as it can pass the whole functionality as a parameter.</p>\n<p>Let's think about a function that receives an array and multiplies by two every single item in the array and returns a new brand array with the results of those operations.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">copyAndMultiplyByTwo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> output\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">copyAndMultiplyByTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// [4, 8, 12]</span></code></pre></div>\n<p>This function does its job but it's not reusable for multiplying by other numbers or maybe we want to addTwo instead of multiplying. </p>\n<p>That's when High order functions show their power allowing us to wrap the whole functionality into another function and pass it as an argument to be executed into the function.</p>\n<p>These functions that wrap the functionality and are passed into another function are called callbacks.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">copyAndModify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> output\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">copyAndModify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> multiplyBy2<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// [4, 8, 12]</span>\n  <span class=\"token function\">copyAndModify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> addTwo<span class=\"token punctuation\">)</span>       <span class=\"token comment\">// [4, 6, 8]</span></code></pre></div>\n<p>Converting the old copyAndMultiplyByTwo function in the high order function called copyAndModify we have avoided rewriting the for of loop for every single case that we would like to implement, and instead, we only need to pass a callback function which is gonna decide what we are going to do with each result.</p>\n<h2>Inversion of control</h2>\n<p>Hight order functions and callbacks are a really powerful tool that allows us to get improve our abstraction and cover more case scenarios in our implementations allowing other developers what to do with the data they are passing into the function. </p>\n<p>This kind of implementation inverts the control over the original function making to a developer who is using your function responsible for the different case scenarios and how to deal with them.</p>\n<p>Going back to our copyAndMultiplyByTwo function which accepts an array. Let's say we have created this function as a library to be used by other developers, and one of the requests that in the case that one of the items of the array is undefined, we should return 0.</p>\n<p>Let's implement the change:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">copyAndMultiplyByTwo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">?</span> num <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n      output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> output\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>And then someone requires the same but for null values:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">copyAndMultiplyByTwo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">?</span> num <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> num <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n      output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> output\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>More requirements mean more exceptions in the implementation, and more code changes in the code, and for sure more complexity. </p>\n<p>However, in the case of our function copyAndModify, the inversion of controls make responsible to the developer of the exceptions that he needs to handle and how to implement it in a way that is safe for their app, and this is one of the more valuable features of high order function in combination with callbacks.</p>","frontmatter":{"title":"High order functions, callbacks, and inversion of control","date":"April, 05, 2021","path":"/blog/high-order-functions-callbacks-inversion-control","excerpt":"Functions are one of the basics parts of Javascript. They are really powerful but it depends on ourselves when we declare them how powerfull they can be.","thumbnail":null,"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/ef958/javascript.png"}}}}}},"pageContext":{"prev":{"html":"<p><a href=\"/high-order-functions-callbacks-inversion-control\">High order functions</a> are one of the patterns more used in Javascript and one of the reasons is because of a feature that allows us to persist the local memory of a function beyond its invocation, and its name is closure.</p>\n<p>Closures will provide us a super powerful tool that will allow us to create complex patterns like currying, once time invokation functions, memoization, even the module pattern which is based on closure as well.</p>\n<h2>Returning functions</h2>\n<p>Functions never remember anything from previous runnings, the local memory created inside them is fresh every time. Everything is deleted but the returned value. </p>\n<p>Nevertheless, there is a way to cache that local memory created inside of that function and make it persist attached to the value returned from that function, and that value <strong>must be another function.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">createMultiplier</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">multiplier</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">multipy</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">multiplicand</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> multiplier <span class=\"token operator\">*</span> multiplicand\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> multiply\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> multiplyBy2 <span class=\"token operator\">=</span> <span class=\"token function\">createMultiplier</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> value1 <span class=\"token operator\">=</span> <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 20</span>\n  <span class=\"token keyword\">const</span> value2 <span class=\"token operator\">=</span> <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 8</span></code></pre></div>\n<p>Above we are able to persist multiplier, which is within the scope of the multiply function by returning multiply without being executed, that way we attach to it all the lexical environment from where it was created.</p>\n<p>As a note, we need to clarify that once multiply is returned from createMultiplier, it has nothing to do with the function where it was created. Once its definition was returned we don't care anymore about createMultiplier but the definition of multiply stored in the variable multiplyBy2.</p>\n<h2>Nested function scope</h2>\n<p>As we know, when returning a function from another function what we are trying to achieve is persist the outer's function scope (<strong>lexical environment</strong>) which is accessible from the function definition returned, and that's because where a function is created determines what data it has access to when it's called.</p>\n<blockquote>\n<p>Where a function is created determines what data it has access to when it's called</p>\n</blockquote>\n<p>This also applies to functions declared directly in the global memory, and in the next example when we try to execute the expression <strong>counter++</strong> from inside the increment function, if it doesn't find the variable in its own local memory, it goes straight to look for it in the global memory.  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    counter<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>Inside of a function since increment was declared into the outer function, when it doesn't find counter in its own local memory, tries to find it in the outer's local memory which is still there because we have not finished executing that function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      counter<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> counter\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>The only problem with the previous implementation is that the value of the counter doesn't persist further than outers invocation, and that's because we are executing increment inside of the function instead of returning its definition.</p>\n<h2>Retain function memory</h2>\n<p>Let's say that instead of the previous implementation, what we want to do is persist the value of the counter to be taken into account for next runnings of increment.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      counter<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> increment\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p>In that case, what we are doing is creating an outer function, and declare inside of it our increment function, but instead of invoking increment from inside that function, what we will be doing is returning increment out and storing that function definition into a new variable called count.</p>\n<p>From now on, when we invoke count, which contains the definition of increment created inside of outer, It's going to try to find counter in its own local memory and when it doesn't find it, instead of looking for it in the global memory, It will search in the <strong>backpack</strong> with the information that has taken with it.  </p>\n<h2>Closure behind the scenes</h2>\n<p>You could be wondering, how this works under the hood and the answer is that when we declare the increment function inside of outer, that the function automatically creates a hidden property called <strong>[[scope]]</strong> that contains all the surrounding data from where it was declared. </p>\n<p>That piece of permanent data is private, we can only access it by running the function. </p>\n<p>As a note, we can say that only the data that will be referenced into the returned function will be added to that persisted memory, the other values inside are garbage collected and not accessible anymore. That's the case of the variable anotherCounter in the example below, since it's not used, it's lost.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> anotherCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      counter<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> increment\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<h2>Multiple Closure instances</h2>\n<p>To summarizing, we can say that our high order function returns a function which has attached to it the closure or persistent data available when it was declared.</p>\n<p>Every time we invoke that high order function we will return a new function with its own and independent data that can be only modified by invoking that reference to the retuned function.</p>\n<p>For that reason in the example below, every call to count is modifying a persisted data completely different that the data which is referencing the anotherCount function since every time we ran outer we created a different execution context with a new brand counter in the variable environment bond to the returned function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      counter<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> anotherCount <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n\n  <span class=\"token function\">anotherCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token function\">anotherCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n </code></pre></div>\n<h2>Closure definition and Scope</h2>\n<p>For most developers, this persistent piece of memory is called closure, term that also refers to the whole concept of this implementation. In that way we end up getting a vague concept of what clousure is.</p>\n<p>But there are other ways to refer to it. Some people also call to the local memory surrounding our returned function as <strong>Variable Environment</strong> (also lexical environment), and this environment is closed over the function definition that we are returning, so this ends up turning into <strong>COVE, which stands for Closed Over Variable Environment</strong></p>\n<p>There is other technical definition that tries to show a depth of understanding of what's going on in this feature. This is PLSRD which stands for <strong>Persistent Lexically Scoped Referenced Data</strong>.</p>\n<p>In a programming language, Scope determines what data is available for every single line of code, and Javascript is a <strong>Lexical or Static Scoped language</strong> instead of a Dynamic Scoped language. That means that where a function is declared determines what data is available, and not where the function is run.</p>\n<p>This leaves us with at least 3 o 4 names for this data:</p>\n<ul>\n<li>Closure</li>\n<li>COVE</li>\n<li>PLSRD</li>\n<li>Backpack</li>\n</ul>\n<h2>Wrapping up</h2>\n<p>We have gone through the concept of closures and all its characteristics. This feature gives great power and an endless variety of possibilities to implement different patterns as we said before. You just need to start experimenting with this amazing feature to assimilate even more what you can achieve with it.</p>","id":"49bad175-0800-5ff3-b1b7-b552d88314ac","frontmatter":{"date":"10 April, 2021","path":"/blog/closure-high-order-functions","title":"Closure and high order functions","excerpt":"Closure is one of the most powerful features in Javascript, and used in the right way can bring endless possibilities into your implementations.","tags":["javascript","functions","closure","high order functions","javascript closure"],"type":"post","category":"javascript","thumbnail":null,"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/ef958/javascript.png"}}}}},"next":{"html":"<p>It's been a few times that I have heard someone saying that I should use triple equals when comparing values because in that way I will be comparing not just the value but also the type of that value.</p>\n<p>An example of that case would be something like comparing a number, maybe 2, with a string like \"2\". Depending on how we compare these two values we can get different results.</p>\n<p>This is called equality between two values where two equals are loose equality comparison and the three equals are called strict equality</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false </span></code></pre></div>\n<p>We have assumed that the difference between both results it's basically that it's because the three equals are checking the type and the value and the two equals one is only checking the value. </p>\n<p>The thing it's both of them are checking the types, but the triple equal comparison is returning false at the very first moment those types don't match.</p>\n<p>On the other hand, the double equal will try a completely different approach, and that approach is called coercion.</p>\n<h2>Coercion in our code.</h2>\n<p>Coercion is basically typing coversion, as it's called in EcmaScript spec. There are different abstract operations that are in charge of this type of conversion when it's needed. ToPrimitive(), ToString(), ToNumber() or ToBoolean() will help us to achieve that type conversion.  </p>\n<p>but, when coercion takes place? We have always heard that coercion is something that we should avoid because it can make us commit terrible mistakes but at the same time, we should say that this is a very powerful feature in Javascript.</p>\n<h3>Number to String</h3>\n<p>We bear in mind that thought telling us that coercion is evil, but we use coercion all the time in one of the features more loved by everyone like the template interpolation.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// coercion and evil</span>\n\n  <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n\n  <span class=\"token keyword\">const</span> introduction <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">My name is Jack and I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token comment\">// coercion but great</span></code></pre></div>\n<p>Actually, what we are doing is a type conversion of the value for the variable age from a number to a string, and inserting that value within two strings will create another string which, later, will be assigned to the introduction variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n\n  <span class=\"token keyword\">const</span> part1 <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">My name is Jack and I'm</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token keyword\">const</span> part2 <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">years old</span><span class=\"token template-punctuation string\">`</span></span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> part1 <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> part2<span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can say that this is the way implicit to do coercion and the one that sometimes we don't even know we are doing. There are other ways to do it more explicitly like using the method String().</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n\n  <span class=\"token keyword\">const</span> introduction <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">My name is Jack and I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old</span><span class=\"token template-punctuation string\">`</span></span> </code></pre></div>\n<p>This was an example of coercion from number to string but how this could happen the other way around, a string into a number.</p>\n<h3>String to Number</h3>\n<p>All of us have dealt at some point with some elements in web development like forms that return a string and we are expecting to deal with that as a number in our functionality but it's not, causing unexpected behavior in our application.</p>\n<p>Let's think about a function called addTwo, which is gonna receive a parameter called num but, depending on the type of that parameter is gonna return different values. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTwo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// number</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span>\n\n  <span class=\"token comment\">// string</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Ops! 22</span></code></pre></div>\n<p>How we could be explicit about coercing a string into a number, well the same we did in our previous case but using the Number() function instead of the String()</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTwo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span></code></pre></div>\n<p>Even we could pass that string into a number in an implicit way that it's not telling what it's doing as the Number() function but it's doing the type conversion behind the scenes, like adding the add operator in front of the parameter.</p>\n<p>In that case, the + will do coercion to our parameter passing it into a number when it's needed and when it's able to do it. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"4\"</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTwo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span></code></pre></div>\n<h3>String to Boolean</h3>\n<p>And what about booleans. I'm pretty sure that at some point you have used an if statement to check if you are receiving an empty string, without comparing with a proper empty string the variable itself.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">const</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\n  <span class=\"token comment\">// Doing this </span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>myString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Instead of this</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>myString <span class=\"token operator\">===</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Well, in that case, what we are doing is coercing myString to a boolean since the if statement what it's expecting is an operation that evaluates on true or false like it's doing (string === \"\")</p>\n<p>There are other ways to make implicit coercion with number or strings and one of them could be the double exclamation mark in front of our value</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token keyword\">const</span> myNumber <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  \n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>myString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>myNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// true    </span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>or as we saw also there is an explicit way to do it, with the function Boolean().</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"myString\"</span>\n  \n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>myString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// true</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Understanding coercion is important.</h2>\n<p>There are different corner cases for coercion when values interact with each other and some of them can be really unexpected but they are happening even when we don't know about it.</p>\n<p>The thing's coercion could bring confusion to our codebase, and I'm not saying that you should use coercion within your app, but at least understand how it works would help a lot to understand what's going on when it happens implicitly in your code.</p>","id":"1c084241-ba24-5ad7-a89d-0f8043427050","frontmatter":{"date":"03 April, 2021","path":"/blog/values-and-coercion","title":"Values and coercion","excerpt":"How many times have you heard the fact that doubles equals check the value but not the type while three equals check both","tags":["javascript","coercion","variables javascript","javascript engine","javascript values"],"type":"post","category":"javascript","thumbnail":null,"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/ef958/javascript.png"}}}}}}},"staticQueryHashes":["3649515864","63159454"]}