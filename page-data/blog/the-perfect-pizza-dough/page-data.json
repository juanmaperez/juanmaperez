{"componentChunkName":"component---src-templates-post-template-js","path":"/blog/the-perfect-pizza-dough","result":{"data":{"markdownRemark":{"html":"<p>Pizza is great but achieving the perfect pizza dough could be difficult without the right recipe.</p>\n<p>Creating the best pizza dough is not hard in terms of effort but sometimes can take time because of the fermentation process.</p>\n<h2>Poolish preparation</h2>\n<p>The poolish is the prefermentation of the dough. We will be making this preparation first and it's really important because will help to create a fluffier mix.</p>\n<h3>Ingredients</h3>\n<ul>\n<li>Water 180gr</li>\n<li>00 Flour 180gr </li>\n<li>Fresh yeast 4gr</li>\n<li>Honey 3gr</li>\n</ul>\n<h3>Steps</h3>\n<ol>\n<li>Disolve the yeast in the water.</li>\n<li>Add the honey and disolve it into the water.</li>\n<li>Add the flour and mix until the content is soft.</li>\n<li>Leave the mix resting for 1 hour at room temperature.</li>\n<li>Move it to the fridge and leave it there for 16 to 24 hours.</li>\n<li>Take out of the fridge the next day and leave it resting for 20' before start preparing the dough.</li>\n</ol>\n<h2>Dough preparation</h2>\n<h3>Ingredients</h3>\n<ul>\n<li>Water 240gr</li>\n<li>00 Flour 420gr </li>\n<li>Salt 12gr</li>\n<li>Olive oil 6gr</li>\n<li>Poolish</li>\n</ul>\n<h3>Steps</h3>\n<ol>\n<li>Add the water and the poolish and remove until mixed and soft.</li>\n<li>Add the salt and remove again.</li>\n<li>Add the flour and integrate all together with your hands.</li>\n<li>Work the dough in the counter.</li>\n<li>Add the olive oil over the dough and keep working it for 10' or 15'.</li>\n<li>Fold the dough and give strength to the dough.</li>\n<li>Leave it rest for 15/20 minutes covered.</li>\n<li>Fold the dough from the center from both sides to give more strength to the dough.</li>\n<li>Put it in a bowl covered in the fridge and leave it there for 16/24 hours. This is the double fermentation.</li>\n<li>Take the dough out of the fridge and leave it rest for at least 20' to 1 hour.</li>\n<li>Make balls of 250gr keeping the bottom of the dough at the bottom and closing the ball over that bottom side. </li>\n<li>Colocate the balls on a tray with the closing side to the bottom.</li>\n<li>Leave the balls rest for 1/2 hours at room temperature.</li>\n<li>Take the balls out of the tray and pass them over semolina and strech the dough.</li>\n</ol>\n<h2>Pizza in the oven.</h2>\n<ol>\n<li>Place the stone inside of the oven and switch it on at max temperature during 1 hour.</li>\n<li>Add tomato sauce to the base and put it into the oven until golden.</li>\n<li>Take the pizza out and add the ingredients.</li>\n<li>Cook the pizza at max temperature and take it out before the mozzarella is burnt</li>\n</ol>","frontmatter":{"title":"The perfect pizza dough","date":"July, 26, 2021","path":"/blog/the-perfect-pizza-dough","excerpt":"Pizza is great but achieving the perfect pizza dough could be difficult without the right recipe.","thumbnail":null,"icon":{"childImageSharp":{"fluid":{"src":"/static/d1c1888a9dcd5fbe69afb46d070bd341/ef958/recipes.png"}}}}}},"pageContext":{"prev":null,"next":{"html":"<p><a href=\"/high-order-functions-callbacks-inversion-control\">High order functions</a> are one of the patterns more used in Javascript and one of the reasons is because of a feature that allows us to persist the local memory of a function beyond its invocation, and its name is closure.</p>\n<p>Closures will provide us a super powerful tool that will allow us to create complex patterns like currying, once time invokation functions, memoization, even the module pattern which is based on closure as well.</p>\n<h2>Returning functions</h2>\n<p>Functions never remember anything from previous runnings, the local memory created inside them is fresh every time. Everything is deleted but the returned value. </p>\n<p>Nevertheless, there is a way to cache that local memory created inside of that function and make it persist attached to the value returned from that function, and that value <strong>must be another function.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">createMultiplier</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">multiplier</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">multipy</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">multiplicand</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> multiplier <span class=\"token operator\">*</span> multiplicand\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> multiply\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> multiplyBy2 <span class=\"token operator\">=</span> <span class=\"token function\">createMultiplier</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> value1 <span class=\"token operator\">=</span> <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 20</span>\n  <span class=\"token keyword\">const</span> value2 <span class=\"token operator\">=</span> <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 8</span></code></pre></div>\n<p>Above we are able to persist multiplier, which is within the scope of the multiply function by returning multiply without being executed, that way we attach to it all the lexical environment from where it was created.</p>\n<p>As a note, we need to clarify that once multiply is returned from createMultiplier, it has nothing to do with the function where it was created. Once its definition was returned we don't care anymore about createMultiplier but the definition of multiply stored in the variable multiplyBy2.</p>\n<h2>Nested function scope</h2>\n<p>As we know, when returning a function from another function what we are trying to achieve is persist the outer's function scope (<strong>lexical environment</strong>) which is accessible from the function definition returned, and that's because where a function is created determines what data it has access to when it's called.</p>\n<blockquote>\n<p>Where a function is created determines what data it has access to when it's called</p>\n</blockquote>\n<p>This also applies to functions declared directly in the global memory, and in the next example when we try to execute the expression <strong>counter++</strong> from inside the increment function, if it doesn't find the variable in its own local memory, it goes straight to look for it in the global memory.  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    counter<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>Inside of a function since increment was declared into the outer function, when it doesn't find counter in its own local memory, tries to find it in the outer's local memory which is still there because we have not finished executing that function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      counter<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> counter\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>The only problem with the previous implementation is that the value of the counter doesn't persist further than outers invocation, and that's because we are executing increment inside of the function instead of returning its definition.</p>\n<h2>Retain function memory</h2>\n<p>Let's say that instead of the previous implementation, what we want to do is persist the value of the counter to be taken into account for next runnings of increment.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      counter<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> increment\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p>In that case, what we are doing is creating an outer function, and declare inside of it our increment function, but instead of invoking increment from inside that function, what we will be doing is returning increment out and storing that function definition into a new variable called count.</p>\n<p>From now on, when we invoke count, which contains the definition of increment created inside of outer, It's going to try to find counter in its own local memory and when it doesn't find it, instead of looking for it in the global memory, It will search in the <strong>backpack</strong> with the information that has taken with it.  </p>\n<h2>Closure behind the scenes</h2>\n<p>You could be wondering, how this works under the hood and the answer is that when we declare the increment function inside of outer, that the function automatically creates a hidden property called <strong>[[scope]]</strong> that contains all the surrounding data from where it was declared. </p>\n<p>That piece of permanent data is private, we can only access it by running the function. </p>\n<p>As a note, we can say that only the data that will be referenced into the returned function will be added to that persisted memory, the other values inside are garbage collected and not accessible anymore. That's the case of the variable anotherCounter in the example below, since it's not used, it's lost.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> anotherCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      counter<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> increment\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<h2>Multiple Closure instances</h2>\n<p>To summarizing, we can say that our high order function returns a function which has attached to it the closure or persistent data available when it was declared.</p>\n<p>Every time we invoke that high order function we will return a new function with its own and independent data that can be only modified by invoking that reference to the retuned function.</p>\n<p>For that reason in the example below, every call to count is modifying a persisted data completely different that the data which is referencing the anotherCount function since every time we ran outer we created a different execution context with a new brand counter in the variable environment bond to the returned function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      counter<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> anotherCount <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n\n  <span class=\"token function\">anotherCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token function\">anotherCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n </code></pre></div>\n<h2>Closure definition and Scope</h2>\n<p>For most developers, this persistent piece of memory is called closure, term that also refers to the whole concept of this implementation. In that way we end up getting a vague concept of what clousure is.</p>\n<p>But there are other ways to refer to it. Some people also call to the local memory surrounding our returned function as <strong>Variable Environment</strong> (also lexical environment), and this environment is closed over the function definition that we are returning, so this ends up turning into <strong>COVE, which stands for Closed Over Variable Environment</strong></p>\n<p>There is other technical definition that tries to show a depth of understanding of what's going on in this feature. This is PLSRD which stands for <strong>Persistent Lexically Scoped Referenced Data</strong>.</p>\n<p>In a programming language, Scope determines what data is available for every single line of code, and Javascript is a <strong>Lexical or Static Scoped language</strong> instead of a Dynamic Scoped language. That means that where a function is declared determines what data is available, and not where the function is run.</p>\n<p>This leaves us with at least 3 o 4 names for this data:</p>\n<ul>\n<li>Closure</li>\n<li>COVE</li>\n<li>PLSRD</li>\n<li>Backpack</li>\n</ul>\n<h2>Wrapping up</h2>\n<p>We have gone through the concept of closures and all its characteristics. This feature gives great power and an endless variety of possibilities to implement different patterns as we said before. You just need to start experimenting with this amazing feature to assimilate even more what you can achieve with it.</p>","id":"49bad175-0800-5ff3-b1b7-b552d88314ac","frontmatter":{"date":"10 April, 2021","path":"/blog/closure-high-order-functions","title":"Closure and high order functions","excerpt":"Closure is one of the most powerful features in Javascript, and used in the right way can bring endless possibilities into your implementations.","tags":["javascript","functions","closure","high order functions","javascript closure"],"type":"post","category":"javascript","thumbnail":null,"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/ef958/javascript.png"}}}}}}},"staticQueryHashes":["3649515864","63159454"]}