{"componentChunkName":"component---src-templates-post-template-js","path":"/blog/demystifying-useReducer-hook","result":{"data":{"markdownRemark":{"html":"<p>The useReducer hook can be a bit confusing if you never worked with Redux, lots of people avoid using this hook for complex state management and instead implement a bunch of useState.</p>\n<p>The complexity of useReducer is not such, but the fact of receiving a reducer and an initial state makes it look a bit more complex than useState.</p>\n<h2>Motivation.</h2>\n<p>The useState can get you a really long way with React state management but you might want to separate your state logic from the actual component that makes your state change. Also, using an object to manage different pieces of state that change with same action might be handy.</p>\n<h2>Basic implementation</h2>\n<p>As we said, useReducer accepts 2 parameters:</p>\n<ol>\n<li><strong>Reducer</strong>: a function that receives 2 parameters: <code class=\"language-text\">state</code> (is the current state) and <code class=\"language-text\">action</code> (whatever is passed to update the state)</li>\n<li><strong>initialState</strong>: initial value for our state</li>\n</ol>\n<p>Also it's gonna return 2 values:</p>\n<ol>\n<li><strong>current state</strong></li>\n<li><strong>Dispatch function</strong>: used to update the state.</li>\n</ol>\n<h3>Replicating useState</h3>\n<p>With that said, let's make a start replicating the behavior of useState but with useReducer, that way we can see the differences and similarities between both hooks</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// =========================</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">countReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> newState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> newState\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now we have achieved the same behavior but with different hooks.</p>\n<p>This implementations is too simple and basically we are passing into the dispatch(setCount) the new value that we want for our state.</p>\n<h3>Update the state base on the action(step).</h3>\n<p>Now let's change our useReducer in a way that our action is actually determining the state of the useReducer is gonna change, and we can achieve that passing the step that we want to increment our previous state, and we can change the name from the dispatch function from <code class=\"language-text\">setCount</code> to <code class=\"language-text\">updateCount</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> step <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> step<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// =========================</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">countReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> step</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> step\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> step <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> updateCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">updateCount</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This looks great! Our useReducer seems to be doing the same as our useState hook.</p>\n<h3>state and action as objects.</h3>\n<p>When stateful components in React where based on classes and we used <code class=\"language-text\">this.setState</code> to update our state, we used to pass an object because the state was managed as an object. And only the properties that we passed were the ones updated in our state.</p>\n<p>Let's change our implementation of useReducer to manage the state as an object, but also receive the action with the properties that we want to update. Besides, the values returned by our useReducer are not longer representing our state because it has become more complex than <code class=\"language-text\">count</code> and <code class=\"language-text\">updateCount</code>, we will use instead <code class=\"language-text\">state</code> and <code class=\"language-text\">setState</code>:</p>\n<p>Also the countReducer will change its previous behavior to return a the new state based on the action received, updating the properties that are overlapping between each other.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">countReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>action <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> step <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> count <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> state\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> count <span class=\"token operator\">+</span> step <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>SetState can receive either an object or a function</h3>\n<p>As you might remember, <code class=\"language-text\">this.setState</code> was able to receive either an object to update the state or a callback which received the current state of our component and returns an object with the properties that we want to update. And that's the next step in our implementation.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> step <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    count<span class=\"token operator\">:</span> currentState<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> step<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>To support that behavior we need to handle in our <code class=\"language-text\">countReducer</code> the possibility of our <code class=\"language-text\">action</code> being an object or a function which receives the current state and returns the properties that we want to update in the state. And we need to spread both of them.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">countReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">?</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It might seem that supporting the function doesn't add much value, but it actually it's really important to delegate the control over whoever is using our API (<a href=\"&#x27;/high-order-functions-callbacks-inversion-control&#x27;\">inversion of control</a>).</p>\n<h3>Using the reducer convention on dispatch and reducer</h3>\n<p>This implementation so far is really cool, and we could use useReducer in the way that we are using it right now. Although, the convention inherit from Redux is based on dispatching an action containing the type of action and an optional payload <code class=\"language-text\">{ type: &quot;DECREMENT&quot;, step: 2 }</code>, and depending of the type of action, update the state based on the payload.</p>\n<p>So now our implementation is gonna change completely and our reducer will have a switch statement to update our state based on the type of action and will return the new piece of state. And as we said that action will be dispatched by our <code class=\"language-text\">dispatch</code> function was called setState previously.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">countReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"INCREMENT\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> action<span class=\"token punctuation\">.</span>step\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"DECREMENT\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> action<span class=\"token punctuation\">.</span>step\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unsupported action type'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> step <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"INCREMENT\"</span><span class=\"token punctuation\">,</span> step <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"DECREMENT\"</span><span class=\"token punctuation\">,</span> step <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now we can dispatch different actions and our reducer will return our new state based on the type and will use the step to increase in an amount step the count.</p>\n<p>Also we will be throwing an error in the case of an unsupported action type.</p>\n<h2>Bottom Line</h2>\n<p>As we saw here the useReducer hook API is much more flexible than we thought. It's true there is a convention on how implement your reducer but it's not a requirement to implement useReducer, although it's a great convention and it improves the maintainability as our reducer gets more complex.</p>","frontmatter":{"title":"Demystifying the useReducer hook","date":"November, 30, 2021","path":"/blog/demystifying-useReducer-hook","excerpt":"useReducer can be a bit confusing and some people avoid using this hook for complex state management.","thumbnail":null,"icon":{"childImageSharp":{"fluid":{"src":"/static/73ecf96398499dd6127dadc1e9e631ad/ef958/react.png"}}}}}},"pageContext":{"prev":null,"next":{"html":"<p>Fetch is one of the most used API from the browser. We take advantage of this API to perform http requests such as <code class=\"language-text\">POST</code>, <code class=\"language-text\">GET</code>, <code class=\"language-text\">PUT</code>, <code class=\"language-text\">PATCH</code> or <code class=\"language-text\">DELETE</code>, but not everyone knows all the features that it offers.</p>\n<p>Basically, the Fetch API provides an easy and logical way to retrieve resources asynchronously across the network.</p>\n<h2>Fetch method and Response object.</h2>\n<p>The Fetch API provides a global <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/fetch\" target=\"_blank\">fetch() method</a>, which is a better alternative than the old <code class=\"language-text\">XMLHttpRequest</code> and <code class=\"language-text\">jQuery.ajax()</code>, with significant differences:</p>\n<ul>\n<li><code class=\"language-text\">fetch()</code> won't reject on HTTP error status even if the response is an 404 or 500, instead will resolve with the <code class=\"language-text\">ok</code> property set to false</li>\n<li>won't send cross-origin cookies.</li>\n</ul>\n<p>The simplest use of fetch takes one argument, the path to the resource you want to fetch.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com/movies\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you are wondering what type of object is returning the fetch method, it's just a promise that resolves in a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\" target=\"_blank\">Response</a> to our request, and this is the way that you'll most likely find this type of object.</p>\n<h2>Request</h2>\n<p>As we said before, <code class=\"language-text\">fetch()</code> can receive more than one argument, the first one is the path of the resource and the second is an object containing any custom settings that you want to apply to request (method, headers, body, mode, credentials, cache, etc).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> accept<span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We basically pass to the <code class=\"language-text\">fetch()</code> method all the arguments that we need for our request but, did you know that there is actually a Request constructor?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> accept<span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can use both together, the Request constructor is kinda like a way to describe a request, and the fetch is kinda like telling the JavaScript environment to actually execute the described request.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> accept<span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Headers</h2>\n<p>Another API that you might not be familiar with is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Headers\" target=\"_blank\">Headers API</a>, which has associated a list of headers, but also methods to perform actions such as retrieving, setting or removing headers from the list.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> accept<span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nheaders<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Set-Cookie\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"some_cookie=cookie-value\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  headers<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Also is worth saying that the Headers are present in the request but also in the response, and they can be accessed via Request.headers and Response.headers</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\nres<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// application/json</span></code></pre></div>\n<h2>URL and parameters</h2>\n<p>As we said the first parameter in the request object is the path to the resource, basically the URL.</p>\n<p>The URL interface is used to parse, construct, normalize, and encode URLs. It works by providing properties which allow you to easily read and modify the components of a URL.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com/movies\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The URL interface can receive the whole url as a string or two arguments where the first element is the relative path and the second one is the base url.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://example.com\"</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>hostname<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"http://example.com\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"/movies\"</span></code></pre></div>\n<p>Besides, It's also common that some resources accept parameters such as page, limit or filters that can be sent with the URL.</p>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\" target=\"_blank\">URLSearchParams</a> interface defines utility methods to work with the query string of a URL, and it's also present in the URL interface under the property searchParams.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com/movies\"</span><span class=\"token punctuation\">)</span>\n\nurl<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nurl<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"limit\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This API expects an object of key and value properties and it returns URLSearchParams object instance with a list of methods such as <code class=\"language-text\">toString()</code>, <code class=\"language-text\">has()</code>, <code class=\"language-text\">get()</code>, <code class=\"language-text\">set()</code> and more:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span>\n<span class=\"token keyword\">const</span> limit <span class=\"token operator\">=</span> <span class=\"token string\">\"10\"</span>\n\n<span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> limit <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://example.com/movies?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Bottom Line</h2>\n<p>The Fetch Api is a more complex API than just a global method <code class=\"language-text\">fetch()</code>, even when it covers the essential feature of retrieving data. Fetch API is composed of a bunch of other APIs and interfaces that fit together into the HTTP pipeline.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Params</span>\n<span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span>\n<span class=\"token keyword\">const</span> limit <span class=\"token operator\">=</span> <span class=\"token string\">\"30\"</span>\n\n<span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> limit <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// URL</span>\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://example.com/movies?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Headers</span>\n<span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> accept<span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Request</span>\n<span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> headers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// fetch</span>\n<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Response</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","id":"777159de-c2e1-5f8c-bf37-a8e613966cd9","frontmatter":{"date":"25 November, 2021","path":"/blog/deconstructing-fetch-browser-api","title":"Deconstructing the Fetch API","excerpt":"Fetch is one of the most used APIs in our projects but not everyone knows about all the features available.","tags":["javascript","fetch API","fetch","typescript","fetch browser API"],"type":"post","category":"javascript","thumbnail":null,"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/ef958/javascript.png"}}}}}}},"staticQueryHashes":["3649515864","63159454"]}