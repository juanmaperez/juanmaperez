{"componentChunkName":"component---src-templates-post-template-js","path":"/blog/how-javascript-engine-works","result":{"data":{"markdownRemark":{"html":"<p>If we want to understand how javascript works beyond your code, you need to know three different concepts or ideas that you will see repeated throughout the rest of your life as a programmer.</p>\n<ul>\n<li>Syntax Parser,</li>\n<li>Lexical Environment,</li>\n<li>Execution Context.</li>\n</ul>\n<h2>Syntax parser.</h2>\n<p>It’s a program that reads your code and determines what it does and if its grammar is valid. Your code is not magic, someone else wrote a program to translate it for the computer.</p>\n<p>These programs are interpreters, also known as compilers. Compilers work reading your code character by character and they implement that syntax in a way that computer can understand.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>This program starts reading F-U-N-C-T-I-O-N and when it finishes it determines that you have declared a function, and after this continues and identifies a variable inside of it.</p>\n<h2>Lexical environment</h2>\n<p>It’s about where something sits physically in the code you write. <strong>A lexical environment exists in programming in which where you write something is important</strong>. This happens because the order determines how these elements will interact with other variables and functions.</p>\n<p>Compilers care about where you put things. They make decisions about where something is and what is surrounding it.</p>\n<h2>Execution context: creation and hoisting</h2>\n<p>The execution context is a wrapper to help manage the code that is running. There are a lot of lexical environments. And one of them is currently running via execution contexts. It can contain things beyond what you have written in your javascript code.</p>\n<p>The execution context is composed of two phases: <strong>creation and execution</strong> and we will need a variable and a function if we want to explain how both of them work:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">;</span> \n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">b</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Called ¡b!\"</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span> \n\n  <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>   \n    \n  <span class=\"token comment\">// Called b! </span>\n  <span class=\"token comment\">// Hello World</span></code></pre></div>\n<p>When we execute this code It will show what we expected but if we would put the call to the function and the variable log at the top of the javascript file, it showed that the variable a wasn’t defined with a value instead of return an error as usual in other programming languages:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> \n\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">;</span> \n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">b</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Called b!\"</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span> \n\n  <span class=\"token comment\">// Called b! </span>\n  <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>Some people think that this happens because the javascript engine moves all the functions and variables, created along the all entire code, to the top of the file. But how it really works is through the Creation phase where hoisting is created:</p>\n<ul>\n<li>Global Object</li>\n<li>‘this’</li>\n<li>Outer Environment</li>\n<li>and the Hoisting</li>\n</ul>\n<p>Javascript engine has already set hoisting, a memory space for variables and function that you’ve created in that entire code that you’ve built. All this mean that when the code is executed line by line, this variables and function already exist.</p>\n<p>However, functions are entirely placed into memory space, that means that the function is named and the code inside but variables are only created, their value is not assigned yet. It’s in the next phase, the execution phase, where these kinds of assignments are set, where variable equals something.</p>\n<p>Then, the variable is executed but how it has not a value assigned instead of return and error, javascript engine puts a placeholder called undefined.</p>\n<h2>Different between undefined and not been defined</h2>\n<p>In javascript, we have two different ways to define a variable. It could be when we assign a value or when the own engine of the programming language assigns the value automatically as undefined. In another hand, if we never create a variable, the browser will show us an Uncaught referenceError: variable is not defined.</p>\n<p>In the first case, we can create a variable like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hello World</span></code></pre></div>\n<p>and we will see that the browser shows that the browser returns the value Hello World. But if we try to create another variable b without a value:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n\n  <span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>In this case, the variable has been created and the console log shows the variable as undefined but this is confusing. <strong>Because our variable has a value assigned automatically by the javascript engine with the special keyword undefined.</strong> For this reason, we don’t get an error when we refer to the variable b.</p>\n<p>However, if we would have tried to log a variable that we have never declared before like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> \n  <span class=\"token comment\">// Uncaught ReferenceError : c is not define</span></code></pre></div>\n<p>It will give you an error because when that initial execution context creation, in that creation phase, when Javascript engine went trough memory space, it didn’t find a var c so it doesn’t have c in memory at all.</p>\n<h2>Wrapping up</h2>\n<p>We have seen 3 different concepts and all work together to get javascript working: </p>\n<p>We can say that the <strong>syntax parser</strong> is the piece that it's gonna read what we have written to indentify what we are trying to achieve. Besides we have a <strong>lexical context</strong> that gives an lexical environment to our commands according to interact with each other. And finally we got a <strong>execution context</strong> that it's gonna read our code, save it on its corresponding memory space and execute it.</p>","frontmatter":{"title":"How javascript engine works","date":"May, 18, 2018","path":"/blog/how-javascript-engine-works","excerpt":"If we want to understand how javascript works beyond your code, you need to know three different concepts or ideas that you will see repeated throughout the rest of your life as a programmer.","thumbnail":null,"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/ef958/javascript.png"}}}}}},"pageContext":{"prev":{"html":"<p>Getting into a new programming language, most of the time, starts in the same way, declaring a variable and setting a value in that variable. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token string\">\"Michael\"</span> </code></pre></div>\n<p>We can think about this line of code in different ways and it could be caused by multiple reasons. Maybe you can just assume how it will behave or bring your knowledge from other programming languages and apply the same logic in this scenario.</p>\n<h2>The relationship between variables and values.</h2>\n<p>Let's think about an specific scenario:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">let</span> childOne <span class=\"token operator\">=</span> <span class=\"token string\">\"Mark\"</span>\n\n  <span class=\"token keyword\">let</span> childTwo <span class=\"token operator\">=</span> childOne\n\n  childOne <span class=\"token operator\">=</span> childOne <span class=\"token operator\">+</span> <span class=\"token string\">'us'</span> </code></pre></div>\n<p>Let's say someone decides to call her child Mark, and a friend of hers decides to call her child after her child's name. A few days later, the first person thinks about all the mess that will cause when they go together to the park and also decides to add 'us' at the end of his child’s name, ending up as Markus.</p>\n<p>That piece of code leaves us with two children where childOne is now called Markus and the childTwo is called Mark. </p>\n<p>Some people think about variables as a container where you store values isolated from external changes, but let's try a more complex example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">let</span> childOne <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Mark\"</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> childTwo <span class=\"token operator\">=</span> childOne\n\n  childOne<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> childOne<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'us'</span></code></pre></div>\n<p>This example represents the same case scenario but with a more complex value, being an object instead of a simple string. We could think that we are having the same result from this change but what we are actually doing is changing the name to \"Markus\" for both of the children.</p>\n<p>This kind of bug is caused by the idea we build in our heads about variables as containers and the values and the nature of the value itself. </p>\n<h2>It's all about the values.</h2>\n<p>Let's start talking about the concept of variables. I like to think of variables as pointers or wires to values. When we declare a variable and assign a value to it, we are only pointing that variable name to a specific value.</p>\n<p>There are two different groups of values:</p>\n<ul>\n<li>primitives</li>\n<li>objects and functions</li>\n</ul>\n<p>In the first group, we can add different types of values like strings, numbers, booleans, bigInts, symbols, null and undefined. On the other hand, the second group of functions and objects. If you are wondering where I left arrays, let me clarify that arrays are objects.</p>\n<p>These two groups behave in different ways and one of the most important differences between them is that primitive values are immutable, and objects and functions are manipulable.</p>\n<p>Let's look at the first example and explain what it's going on there:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">let</span> childOne <span class=\"token operator\">=</span> <span class=\"token string\">\"Mark\"</span>\n\n  <span class=\"token keyword\">let</span> childTwo <span class=\"token operator\">=</span> childOne\n\n  childOne <span class=\"token operator\">=</span> childOne <span class=\"token operator\">+</span> <span class=\"token string\">\"us\"</span> </code></pre></div>\n<ol>\n<li>Create a variable called childOne and point it to the string value \"Mark\"</li>\n<li>Create a variable called childTwo and point it to the same value</li>\n<li>Change the pointer to a different value, \"Markus\" result of evaluating the expression childOne + \"us\"</li>\n</ol>\n<p>The third step is the key in this example because we were thinking that what we were doing was modifying the value, but we can't do that. In a different way what we are doing is pointing our variable to a completely different value returned from our addition expression (+).</p>\n<p>But in the second example, we are doing a completely different thing. Let's go through it: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">let</span> childOne <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Mark\"</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> childTwo <span class=\"token operator\">=</span> childOne\n\n  childOne<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Markus\"</span></code></pre></div>\n<ol>\n<li>Create a variable called childOne and point it to the object value { name: \"Mark\" }</li>\n<li>Create a variable called childTwo and point it to the same value</li>\n<li>Modifying the property name of the object value that our two variables are pointing to.</li>\n</ol>\n<p>In this case scenario, we can see that we are modifying the property name of the object value that we are pointing through the variable childOne. </p>\n<h2>Verifying strings` immutability</h2>\n<p>Maybe you are a bit confused about the example that we just saw but we can try to modify the value of a string instead of using an expression that evaluates in a specific value.</p>\n<p>We can try to modify the name of one of the children just switching a few letters, passing from Mark to Jack.</p>\n<p>In the same way that we can access properties in objects, we can access the string because they are ropes or data structures of strings. </p>\n<p>Then assuming we can do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">let</span> childOne <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Mark\"</span> <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>childOne<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Mark</span>\n\n  childOne<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Markus\"</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>childOne<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Markus</span></code></pre></div>\n<p>We should be able to do the next thing</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span>  <span class=\"token string\">\"Mark\"</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// M</span>\n\n  child<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"J\"</span>\n  child<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"c\"</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>childOne<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Jack ??</span></code></pre></div>\n<p>But unfortunately, we are not, and that's because as we said before primitive values are immutable.</p>\n<h2>Wrapping up</h2>\n<p>This could be a bit confusing, and It can take a few minutes to assimilate but It's really important to understand the nature of the values that we are using in our code to realize what we are actually doing. </p>","id":"4d2993f0-f982-578b-946d-a5406f5b0a96","frontmatter":{"date":"26 June, 2019","path":"/blog/variables-and-values-javascript","title":"Variables and values in Javascript","excerpt":"Getting into a new programming language, most of the time, starts in the same way, declaring a variable and setting a value in that variable and it's really important to know how they work together.","tags":["javascript","variables javascript","javascript engine","javascript values"],"type":"post","category":"javascript","thumbnail":null,"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/ef958/javascript.png"}}}}},"next":null}},"staticQueryHashes":["3649515864","63159454"]}