{"componentChunkName":"component---src-templates-post-template-js","path":"/blog/deconstructing-fetch-browser-api","result":{"data":{"markdownRemark":{"html":"<p>Fetch is one of the most used API from your browser. We take advantage of this API to perform http requests such as POST, GET, PUT, PATCH or DELETE but not everyone knows all the features that it offers.</p>\n<p>So basically, the Fetch API provides an easy and logical way to retrieve resources asynchronously across the network.</p>\n<h2>Fetch method and Response object.</h2>\n<p>The Fetch API provides a global <code class=\"language-text\">fetch()</code> method, which is a better alternative than the old <code class=\"language-text\">XMLHttpRequest</code> and <code class=\"language-text\">jQuery.ajax()</code>, with significant differences:</p>\n<ul>\n<li><code class=\"language-text\">fetch()</code> won't reject on HTTP error status even if the response is an 404 or 500, instead will resolve with the <code class=\"language-text\">ok</code> property set to false</li>\n<li>won't send cross-origin cookies.</li>\n</ul>\n<p>The simplest use of fetch takes one argument, the path to the resource you want to fetch.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com/movies\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you are wondering what type of object is returning the fetch method, it's just a promise that resolves in a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\">Response</a> to our request, and this is the way that you'll more likely find this type of object.</p>\n<h2>Request</h2>\n<p>As we said before, <code class=\"language-text\">fetch()</code> can receive more than one argument, the first one is the path of the resource and the second is an object containing any custom settings that you want to apply to request (method, headers, body, mode, credentials, cache, etc).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> accept<span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We basically pass to the <code class=\"language-text\">fetch()</code> method all the arguments that we need for our request but, did you know that there is actually a Request constructor?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> accept<span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can use both together, the Request constructor is kinda like a way to describe a request, and the fetch is kinda like telling the JavaScript environment to actually execute the described request.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> accept<span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Headers</h2>\n<p>Another API that you might not be familiar with is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Headers\">Headers API</a>, which has associated a list of headers, but also methods to perform actions such as retrieving, setting or removing headers from the list.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> headers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> accept<span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nheaders<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Set-Cookie\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"some_cookie=cookie-value\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  headers<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Also is worth saying that the Headers are present in the request but also in the response, and they can be accessed via Request.headers and Response.headers</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\nres<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// application/json</span></code></pre></div>\n<h2>URL and parameters</h2>\n<p>As we said the first parameter in the request object is the path to the resource, basically the URL.</p>\n<p>The URL interface is used to parse, construct, normalize, and encode URLs. It works by providing properties which allow you to easily read and modify the components of a URL.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com/movies\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The URL interface can receive the whole url as a string or two arguments where the first element is the relative path and the second one is the base url.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://example.com\"</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>hostname<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"www.example.com\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"/movies\"</span></code></pre></div>\n<p>Besides, It's also common that some resources accept parameters such as page, limit or filters that can be sent with the URL.</p>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\">URLSearchParams</a> interface defines utility methods to work with the query string of a URL, and it's also present in the URL interface under the property searchParams.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com/movies\"</span><span class=\"token punctuation\">)</span>\nurl<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nurl<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"limit\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This API expects an object of key and value properties and it returns URLSearchParams object instance with a list of methods such as <code class=\"language-text\">toString()</code>, <code class=\"language-text\">has()</code>, <code class=\"language-text\">get()</code>, <code class=\"language-text\">set()</code> and more:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span>\n<span class=\"token keyword\">const</span> limit <span class=\"token operator\">=</span> <span class=\"token string\">\"10\"</span>\n<span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> limit <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://example.com/movies?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Bottom Line</h2>\n<p>The Fetch Api is a more complex API than just a global method <code class=\"language-text\">fetch()</code>, even when it covers the essential feature of retrieving data. Fetch API is composed of a bunch of other APIs and interfaces that fit together into the HTTP pipeline.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Params</span>\n<span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token string\">\"music\"</span>\n<span class=\"token keyword\">const</span> limit <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span>\n<span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> term<span class=\"token punctuation\">,</span> limit <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// URL</span>\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://icanhazdadjoke.com/search?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Headers</span>\n<span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> accept<span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Request</span>\n<span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> headers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// fetch</span>\n<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Response</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Deconstructing the Fetch API","date":"November, 25, 2021","path":"/blog/deconstructing-fetch-browser-api","excerpt":"Fetch is one of the most used APIs in our projects but not everyone knows about all the features available.","thumbnail":null,"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/ef958/javascript.png"}}}}}},"pageContext":{"prev":null,"next":{"html":"<p>Pizza is great but achieving the perfect pizza dough could be difficult without the right recipe.</p>\n<p>Creating the best pizza dough is not hard in terms of effort but sometimes can take time because of the fermentation process.</p>\n<h2>Poolish preparation</h2>\n<p>The poolish is the prefermentation of the dough. We will be making this preparation first and it's really important because will help to create a fluffier mix.</p>\n<h3>Ingredients</h3>\n<ul>\n<li>Water 180gr</li>\n<li>00 Flour 180gr </li>\n<li>Fresh yeast 4gr</li>\n<li>Honey 3gr</li>\n</ul>\n<h3>Steps</h3>\n<ol>\n<li>Disolve the yeast in the water.</li>\n<li>Add the honey and disolve it into the water.</li>\n<li>Add the flour and mix until the content is soft.</li>\n<li>Leave the mix resting for 1 hour at room temperature.</li>\n<li>Move it to the fridge and leave it there for 16 to 24 hours.</li>\n<li>Take out of the fridge the next day and leave it resting for 20' before start preparing the dough.</li>\n</ol>\n<h2>Dough preparation</h2>\n<h3>Ingredients</h3>\n<ul>\n<li>Water 240gr</li>\n<li>00 Flour 420gr </li>\n<li>Salt 12gr</li>\n<li>Olive oil 6gr</li>\n<li>Poolish</li>\n</ul>\n<h3>Steps</h3>\n<ol>\n<li>Add the water and the poolish and remove until mixed and soft.</li>\n<li>Add the salt and remove again.</li>\n<li>Add the flour and integrate all together with your hands.</li>\n<li>Work the dough in the counter.</li>\n<li>Add the olive oil over the dough and keep working it for 10' or 15'.</li>\n<li>Fold the dough and give strength to the dough.</li>\n<li>Leave it rest for 15/20 minutes covered.</li>\n<li>Fold the dough from the center from both sides to give more strength to the dough.</li>\n<li>Put it in a bowl covered in the fridge and leave it there for 16/24 hours. This is the double fermentation.</li>\n<li>Take the dough out of the fridge and leave it rest for at least 20' to 1 hour.</li>\n<li>Make balls of 250gr keeping the bottom of the dough at the bottom and closing the ball over that bottom side. </li>\n<li>Colocate the balls on a tray with the closing side to the bottom.</li>\n<li>Leave the balls rest for 1/2 hours at room temperature.</li>\n<li>Take the balls out of the tray and pass them over semolina and strech the dough.</li>\n</ol>\n<h2>Pizza in the oven.</h2>\n<ol>\n<li>Place the stone inside of the oven and switch it on at max temperature during 1 hour.</li>\n<li>Add tomato sauce to the base and put it into the oven until golden.</li>\n<li>Take the pizza out and add the ingredients.</li>\n<li>Cook the pizza at max temperature and take it out before the mozzarella is burnt</li>\n</ol>","id":"c39e04f7-07bb-54d8-b794-30dd80212886","frontmatter":{"date":"26 July, 2021","path":"/blog/the-perfect-pizza-dough","title":"The perfect pizza dough","excerpt":"Pizza is great but achieving the perfect pizza dough could be difficult without the right recipe.","tags":["recipes","pizza","dough","pizza dough","napolitan pizza"],"type":"post","category":"recipes","thumbnail":null,"icon":{"childImageSharp":{"fluid":{"src":"/static/d1c1888a9dcd5fbe69afb46d070bd341/ef958/recipes.png"}}}}}}},"staticQueryHashes":["3649515864","63159454"]}